
package com.proyecto.view;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.proyecto.data.AlumnosDAOJDBC;
import com.proyecto.objects.AlumnosDTO;
import com.proyecto.objects.EncriptadorDTO;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author aspxe
 */
public class GenerarQrs extends javax.swing.JPanel {
    
    private String ruta;
    private int totalImages;

    /**
     * Creates new form generarQrs
     */
    public GenerarQrs() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGenerarQrs = new javax.swing.JButton();
        lblPorcentaje = new javax.swing.JLabel();
        barraProgreso = new javax.swing.JProgressBar();

        setMaximumSize(new java.awt.Dimension(900, 455));
        setMinimumSize(new java.awt.Dimension(900, 455));
        setPreferredSize(new java.awt.Dimension(900, 455));

        btnGenerarQrs.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        btnGenerarQrs.setIcon(new javax.swing.ImageIcon("/home/aspxe/NetBeansProjects/AsistenciasQr/src/main/resources/images/codigo-qr.png")); // NOI18N
        btnGenerarQrs.setText("Generar QR");
        btnGenerarQrs.setMaximumSize(new java.awt.Dimension(250, 80));
        btnGenerarQrs.setMinimumSize(new java.awt.Dimension(250, 80));
        btnGenerarQrs.setPreferredSize(new java.awt.Dimension(250, 80));
        btnGenerarQrs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarQrsActionPerformed(evt);
            }
        });

        lblPorcentaje.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(303, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(392, 392, 392))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(274, 274, 274))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnGenerarQrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(315, 315, 315))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(lblPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(btnGenerarQrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(150, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private static File elegirRuta(){
        // Crear un JFileChooser
        JFileChooser directoryChooser = new JFileChooser();
        // Configurar el JFileChooser para solo seleccionar directorios
        directoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        // Mostrar el diálogo de selección de directorios
        int result = directoryChooser.showOpenDialog(null);

        // Procesar el resultado de la selección
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = directoryChooser.getSelectedFile();
            if (selectedFile.isDirectory()) {
                return selectedFile;
            } else {
                JOptionPane.showMessageDialog(null, "Debe seleccionar una carpeta.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        return null;
    }
    
    
    private void btnGenerarQrsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarQrsActionPerformed
        
        int opcion = JOptionPane.showConfirmDialog(this, "El proceso de generación de Qr's puede tomar unos minutos. ¿Desea continuar?", "AVISO", JOptionPane.YES_NO_CANCEL_OPTION);
        if (opcion == JOptionPane.YES_OPTION) {
            new Task().execute();
        }
    }//GEN-LAST:event_btnGenerarQrsActionPerformed

    private class Task extends SwingWorker<Void, Integer> {
        @Override
        protected Void doInBackground() throws Exception {
            File rutaSeleccionada = elegirRuta();
            if (rutaSeleccionada != null) {
                generarQrs(rutaSeleccionada);
            } else {
                JOptionPane.showMessageDialog(GenerarQrs.this, "No se encontró la ruta", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            return null;
        }

        private void generarQrs(File ruta) throws SQLException, WriterException, IOException, Exception {
            int alto = 400, ancho = 400;
            EncriptadorDTO encriptar = new EncriptadorDTO();
            QRCodeWriter qrCodeWriter = new QRCodeWriter();
            Map<EncodeHintType, Object> hints = new HashMap<>();
            hints.put(EncodeHintType.CHARACTER_SET, "UTF-8");

            AlumnosDAOJDBC alumnos = new AlumnosDAOJDBC();
            List<AlumnosDTO> alumnosRecuperados = alumnos.selectAll();

            totalImages = alumnosRecuperados.size(); // Establecer el total de imágenes a generar

            for (int i = 0; i < totalImages; i++) {
                AlumnosDTO alumno = alumnosRecuperados.get(i);
                String nombre = alumno.getNombre();
                String matricula = alumno.getMatricula();
                String turno = alumno.getTurno();
                String grado = alumno.getGrado();
                String grupo = alumno.getGrupo();
                
                System.out.println("Matricula : "+matricula);
                BitMatrix bitMatrix = qrCodeWriter.encode(matricula, BarcodeFormat.QR_CODE, ancho, alto, hints);
                BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix);

                BufferedImage combined = new BufferedImage(ancho, alto + 50, BufferedImage.TYPE_INT_ARGB);
                Graphics2D g = combined.createGraphics();
                g.drawImage(qrImage, 0, 0, null);
                g.setFont(new Font("Arial", Font.PLAIN, 20));
                g.setColor(Color.BLACK);
                FontMetrics fm = g.getFontMetrics();
                int x = (combined.getWidth() - fm.stringWidth(nombre)) / 2;
                g.drawString(nombre, x, alto + 30);
                g.dispose();

                Path directorio = Paths.get(ruta.getAbsolutePath(), turno, grado, grupo);

                // Verifica si el directorio ya existe
                if (!Files.exists(directorio)) {
                  // Crea el directorio padre si no existe
                  Files.createDirectories(directorio.getParent());

                  try {
                    Files.createDirectory(directorio);
                    System.out.println("Directorio creado: " + directorio.toString());
                  } catch (IOException e) {
                    // Manejar errores de creación de directorio (excepto FileAlreadyExistsException)
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(GenerarQrs.this, "Error al crear el directorio: " + directorio.toString(), "ERROR", JOptionPane.ERROR_MESSAGE);
                  }
                } else {
                  System.out.println("El directorio ya existe: " + directorio.toString());
                  // Puedes optar por omitir la generación del QR o notificar al usuario
                }
                
                Path path = directorio.resolve("qrcode_" + nombre + ".png");
                System.out.println("Path antes de escribir: "+path.toString());
                ImageIO.write(combined, "PNG", path.toFile());
                System.out.println("QR escrito...");

                int progress = (int) ((i + 1) / (double) totalImages * 100);
                publish(progress);
            }
        }

        @Override
        protected void process(java.util.List<Integer> chunks) {
            for (int progress : chunks) {
                barraProgreso.setValue(progress);
                lblPorcentaje.setText(progress + "%");
            }
        }

        @Override
        protected void done() {
            JOptionPane.showMessageDialog(GenerarQrs.this, "Proceso completado", "INFORMACIÓN", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgreso;
    private javax.swing.JButton btnGenerarQrs;
    private javax.swing.JLabel lblPorcentaje;
    // End of variables declaration//GEN-END:variables
}
